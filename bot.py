# -*- coding: utf-8 -*-
import telebot
from telebot import types
import config
from Sqlighter import SQLighter
from collections import defaultdict
import os
from flask import Flask, request


token = os.environ['TOKEN']
bot = telebot.TeleBot(token)

markup_cleared = types.ReplyKeyboardRemove()

markup_ask_again = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_ask_again.row('–ó–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å')
markup_ask_again.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

markup_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_back.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

markup_course = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_course.row('üêü RL üêü')
markup_course.row('üê∏ NLP üê∏')

markup_hw_q = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_hw_q.row('ü¶â –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É ü¶â')
markup_hw_q.row('üêå –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É üêå')
markup_hw_q.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ')

states = defaultdict(dict)


@bot.message_handler(content_types=['text', 'document', 'photo'])
def handler(message):
    global states
    chat_id = message.chat.id
    bot.send_chat_action(chat_id, 'typing')

    if message.chat.username is None:
        username_error(message)
        return

    elif message.chat.id not in states:
        clear_state(message, states)
        default_callback(message, states)

    elif states[chat_id]['currentState'] == 'WAIT_USER_INTERACTION':
        default_callback(message, states)

    elif (states[chat_id]['currentState'] == 'COURSE_SELECTION') and (message.text in ['üêü RL üêü', 'üê∏ NLP üê∏']):
        states[chat_id]['currentState'] = 'HW_OR_QUESTION_SELECTION'
        states[chat_id]['course'] = message.text.split()[1]
        choose_question_or_hw(message)

    elif (states[chat_id]['currentState'] == 'HW_OR_QUESTION_SELECTION') and \
            (message.text in ['ü¶â –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É ü¶â', 'üêå –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É üêå']):
        if message.text == 'ü¶â –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É ü¶â':
            question_handler(message)
            states[chat_id]['currentState'] = 'IN_QUESTION'

        elif message.text == 'üêå –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É üêå':
            hw_handler(message)
            states[chat_id]['currentState'] = 'HW_NUM_SELECTION'

    elif (states[chat_id]['currentState'] == 'IN_QUESTION') and \
            (message.text != '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ') and (message.content_type == 'text'):
        if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            states[chat_id]['currentState'] = 'HW_OR_QUESTION_SELECTION'
            choose_question_or_hw(message)
        elif message.text == '–ó–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å':
            question_handler(message)
        else:
            question_saver(message, course=states[chat_id]['course'])

    elif (states[chat_id]['currentState'] == 'HW_NUM_SELECTION') and (message.content_type == 'text') and \
            ((message.text in config.possible_to_pass[states[chat_id]['course']]) or (message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')):
        if message.text in config.possible_to_pass[states[chat_id]['course']]:
            states[chat_id]['currentState'] = 'IN_HW_UPLOAD'
            states[chat_id]['hw_num'] = message.text
            hw_waiter(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            states[chat_id]['currentState'] = 'HW_OR_QUESTION_SELECTION'
            choose_question_or_hw(message)

    elif (states[chat_id]['currentState'] == 'IN_HW_UPLOAD') and \
            ((message.content_type in ['document', 'photo']) or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'):
        if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            states[chat_id]['currentState'] = 'HW_NUM_SELECTION'
            hw_handler(message)
        else:
            hw_saver(message, states)
    else:
        print('DEFAULT')
        default_callback(message, states)

    print(states)


# use this function as default handler
def default_callback(message, states):
    if message.text == '/start':
        bot.send_message(message.chat.id,
                         'WELCOME, *{}*!\nCHOOSE YOUR DESTINY!'.format(message.chat.username.upper()),
                         reply_markup=markup_course, parse_mode='Markdown')
        clear_state(message, states, set_state='COURSE_SELECTION')

    elif message.text == '/help':
        bot.send_message(message.chat.id,
                         '–ü—Ä–∏–≤–µ—Ç, {}!\n–Ø —É–º–µ—é –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–µ–º–∏–Ω–∞—Ä–∞–º –∏ —Ñ–∞–π–ª—ã —Å –¥–∑ –ø–æ –∫—É—Ä—Å–∞–º NLP & RL.\n'
                         '–î—Ä—É–≥–∏–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.'
                         .format(message.chat.username.title()),
                         reply_markup=markup_course)

    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ':
        bot.send_message(message.chat.id,
                         'HERE AGAIN, *{}*!\nCHOOSE YOUR DESTINY!'.format(message.chat.username.upper()),
                         reply_markup=markup_course, parse_mode='Markdown')
        clear_state(message, states, set_state='COURSE_SELECTION')

    else:
        bla_bla_detected(message)
        clear_state(message, states)


def clear_state(message, states, set_state='WAIT_USER_INTERACTION'):
    states[message.chat.id]['currentState'] = set_state
    states[message.chat.id]['course'] = None
    states[message.chat.id]['hw_num'] = None


def username_error(message):
    bot.send_message(message.chat.id,
                     '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏–ª–∏—Ç–µ —Å–µ–±–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º!',
                     reply_markup=markup_cleared)


def choose_question_or_hw(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ü¶ä', reply_markup=markup_hw_q)


# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É
def question_handler(message):
    bot.send_message(message.chat.id, '–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ü¶ä.',
                     reply_markup=markup_back)


# –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É
def hw_handler(message):
    markup_hw = make_hw_keyboard(states[message.chat.id]['course'])
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π.',
                     reply_markup=markup_hw)


# hw -- –≤—ã–±–æ—Ä –¥–æ–º–∞—à–∫–∏
def hw_waiter(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª **(–æ–¥–∏–Ω –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–¥–∏–Ω Jupyter notebook)** –≤–µ—Å–æ–º –Ω–µ –±–æ–ª–µ–µ 20 –ú–±.',
                     reply_markup=markup_back, parse_mode='Markdown')


# hw -- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–º–∞—à–∫–∏
def hw_saver(message, states):
    username = message.chat.username

    if message.content_type == 'photo':
        bot.send_message(message.chat.id, "{}, –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–æ—á–∫–∞, –Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –¥–æ–º–∞—à–∫—É üö´\n"
                                          "–ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {}.\n"
                                          "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–∑ —Å–¥–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ Jupyter –Ω–æ—É—Ç–±—É–∫–∞."
                         .format(username.title(), str(config.available_hw_resolutions)))
        return

    if not message.document.file_name.endswith(config.available_hw_resolutions):
        bot.send_message(message.chat.id, "üö´ {}, –æ—á–µ–Ω—å –∂–∞–ª—å –Ω–æ —Ñ–∞–π–ª–∏–∫ –Ω–µ —Å–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É...\n"
                                          "–ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {}.\n"
                                          "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–∑ —Å–¥–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ Jupyter –Ω–æ—É—Ç–±—É–∫–∞."
                         .format(username.title(), str(config.available_hw_resolutions)))
        return

    hw_num = states[message.chat.id]['hw_num']
    course = states[message.chat.id]['course']
    markup_hw = make_hw_keyboard(course)
    sqldb = SQLighter(config.bd_name)
    if sqldb.is_exists_hw(user_id=username, hw_num=hw_num, course=course):
        sqldb.upd_homework(user_id=username, hw_num=hw_num, course=course, file_id=message.document.file_id)
        bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ {} –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è:) üêæ\n'
                         .format(username.title(), hw_num),
                         reply_markup=markup_hw, parse_mode='Markdown')
    else:
        sqldb.add_homework(user_id=username, hw_num=hw_num, course=course, file_id=message.document.file_id)
        bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, –≤–∞—à —Ñ–∞–π–ª–∏–∫ –±—ã–ª –∑–∞–±–æ—Ç–ª–∏–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ {} üêæ\n'
                     .format(username.title(), hw_num),
                     reply_markup=markup_hw, parse_mode='Markdown')
    states[message.chat.id]['currentState'] = 'HW_NUM_SELECTION'
    states[message.chat.id]['hw_num'] = None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Å–µ–º–∏–Ω–∞—Ä—É
def question_saver(message, course):
    sqldb = SQLighter(config.bd_name)
    sqldb.write_question(user_id=message.chat.username, question=message.text, course=course)
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üêØ :)\n'
                                      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.',
                     reply_markup=markup_ask_again)


def bla_bla_detected(message):
    bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n'
                                      '–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∂–∏–∑–Ω—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚òòÔ∏è',
                     reply_markup=markup_cleared)


def make_hw_keyboard(course):
    markup_hw = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in config.possible_to_pass[course]:
        markup_hw.row(name)
    markup_hw.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    return markup_hw


if __name__ == '__main__':
    if config.WEBHOOKS_AVAIL:

        WEBHOOK_HOST = config.WEBHOOK_HOST
        PORT = config.PORT
        WEBHOOK_LISTEN = config.WEBHOOK_LISTEN

        server = Flask(__name__)


        @server.route("/webhook", methods=['POST'])
        def getMessage():
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
            return "!", 200

        server.run(host=WEBHOOK_LISTEN, port=PORT)

        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_HOST)
    else:
        bot.delete_webhook()
        bot.polling(none_stop=True)
