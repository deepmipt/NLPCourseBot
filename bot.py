# -*- coding: utf-8 -*-
import time
import telebot
from telebot import types
import config
import requests
from sqlighter import SQLighter

bot = telebot.TeleBot(config.token)
markup_main = types.ReplyKeyboardMarkup()
markup_main.row('ü¶â –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É ü¶â')
markup_main.row('üêå –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É üêå')
markup_main.row('üê∏ –ó–∞—Ä–µ–≥–∞—Ç—å—Å—è üê∏')

markup_hw = types.ReplyKeyboardMarkup()
for name in config.possible_to_pass:
    markup_hw.row(name)
markup_hw.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ')

FLAGS = {'question': False, 'hw': None, 'register': False}

# start
@bot.message_handler(commands=['start'])
def handle_start_help(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫! –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?", reply_markup=markup_main)


# –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'
@bot.message_handler(func=lambda msg: msg.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', content_types=['text'])
def handle_start_help(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "–ß–µ–≥–æ –µ—â–µ –∏–∑–≤–æ–ª–∏—Ç–µ?", reply_markup=markup_main)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É
@bot.message_handler(func=lambda msg: msg.text == 'ü¶â –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É ü¶â', content_types=['text'])
def question_handler(message):
    FLAGS['question'] = True
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ü¶ä"
                                      "\n–í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.\n"
                                      "–í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ –Ω–∏–∂–µ—Å–∫–∞–∑–∞–Ω–Ω–æ–µ c–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç—É.")
# –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É
@bot.message_handler(func=lambda msg: msg.text == 'üêå –°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É üêå', content_types=['text'])
def hw_handler(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π:",
                     reply_markup=markup_hw)

# –ó–∞—Ä–µ–≥–∞—Ç—å—Å—è
@bot.message_handler(func=lambda msg: msg.text == 'üê∏ –ó–∞—Ä–µ–≥–∞—Ç—å—Å—è üê∏', content_types=['text'])
def register_handler(message):
    bot.send_chat_action(message.chat.id, 'typing')

    sqlbd = SQLighter(config.bd_name)
    if sqlbd.is_registered(message.from_user.id):
        name = sqlbd.get_user_name(message.from_user.id)
        sqlbd.close()
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º {} üåµ\n"
                                          "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å —É–∂–µ –Ω–µ–ª—å–∑—è. –°–¥–∞–≤–∞–π—Ç–µ –¥–æ–º–∞—à–∫–∏. üåö".format(name))
        return

    FLAGS['register'] = True
    bot.send_message(message.chat.id, "–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å. üêù\n"
                                      "–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∑.\n"
                                      "–û–Ω–æ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –≤–∞—à–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç—É üåö\n"
                                      "__–í–Ω–∏–º–∞–Ω–∏–µ!__ –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –∏–º—è –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ üêô")
# hw -- –≤—ã–±–æ—Ä –¥–æ–º–∞—à–∫–∏
@bot.message_handler(func=lambda msg: msg.text in config.possible_to_pass, content_types=['text'])
def hw_saver(message):
    FLAGS['hw'] = message.text
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (–æ–¥–∏–Ω –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–¥–∏–Ω Jupyter notebook) –≤–µ—Å–æ–º –Ω–µ –±–æ–ª–µ–µ 20 –ú–± ü¶ã",
                     reply_markup=markup_hw)

# hw -- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–º–∞—à–∫–∏
@bot.message_handler(func=lambda msg: FLAGS['hw'] is not None, content_types=['document'])
def handle_docs(message):
    bot.send_chat_action(message.chat.id, 'typing')
    sqlbd = SQLighter(config.bd_name)
    
    bot.send_message(message.chat.id, "–í–∞—à —Ñ–∞–π–ª–∏–∫ –±—ã–ª –∑–∞–±–æ—Ç–ª–∏–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ {} üêæ".format(FLAGS['hw']),
                     reply_markup=markup_hw)
    FLAGS['hw'] = None

# register -- –ª–æ–≤–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda msg: FLAGS['register'], content_types=['text'])
def register_saver(message):
    FLAGS['register'] = False
    bot.send_chat_action(message.chat.id, 'typing')

    sqlbd = SQLighter(config.bd_name)
    user_id = message.from_user.id
    sqlbd.register(user_id=user_id, user_name=message.text)
    sqlbd.close()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ {}".format(message.text),
                     reply_markup=markup_main)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Å–µ–º–∏–Ω–∞—Ä—É
@bot.message_handler(func=lambda msg: FLAGS['question'], content_types=['text'])
def question_saver(message):
    FLAGS['question'] = False
    bot.send_chat_action(message.chat.id, 'typing')
    sqlbd = SQLighter(config.bd_name)
    user_id = message.from_user.id
    sqlbd.write_question(user_id=user_id, question=message.text)
    sqlbd.close()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üêØ :)")

if __name__ == '__main__':
    bot.polling(none_stop=True)
