from DialogClasses import *
from Sqlighter import SQLighter
import universal_reply
import config
import random
import pandas as pd
from quizzes.QuizClasses import Quiz
from tabulate import tabulate
from collections import OrderedDict
from telebot import util
import dill

wait_usr_interaction = State(name='WAIT_USR_INTERACTION',
                             triggers_out=OrderedDict(MAIN_MENU={'phrases': ['/start'], 'content_type': 'text'}))
# ----------------------------------------------------------------------------

main_menu = State(name='MAIN_MENU',
                  row_width=2,
                  triggers_out=OrderedDict(
                      TAKE_QUIZ={'phrases': [universal_reply.quiz_enter], 'content_type': 'text'},
                      PASS_HW_NUM_SELECT={'phrases': [universal_reply.hw_enter], 'content_type': 'text'},
                      CHECK_QUIZ={'phrases': [universal_reply.quiz_check], 'content_type': 'text'},
                      CHECK_HW_NUM_SELECT={'phrases': [universal_reply.hw_check], 'content_type': 'text'},
                      QUIZ_MARK_NUM_SELECT={'phrases': [universal_reply.quiz_estimates], 'content_type': 'text'},
                      GET_MARK={'phrases': [universal_reply.hw_estimates], 'content_type': 'text'},
                      ASK_QUESTION_START={'phrases': [universal_reply.ask_question], 'content_type': 'text'},
                      ADMIN_MENU={'phrases': [universal_reply.ADMIN_KEY_PHRASE], 'content_type': 'text'}),
                  hidden_states={'state_name': 'ADMIN_MENU', 'users_file': config.admins},
                  welcome_msg='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')


# ----------------------------------------------------------------------------


class QuizState(State):
    def additional_init(self):
        self.quiz = Quiz(config.current_quiz_name, quiz_json_path=config.quiz_path,
                         next_global_state_name='MAIN_MENU')
        # TODO: do smth to provide arguments in the right way
        self.dump_path = config.dump_quiz_path

    def dump_current_states(self):
        with open(self.dump_path, 'wb') as fout:
            dill.dump({'usersteps': self.quiz.usersteps,
                       'submitted': self.quiz.usr_submitted,
                       'paused': self.quiz.paused,
                       'usr_buttons': {q.name: q.usr_buttons for q in self.quiz.questions},
                       'usr_answers': {q.name: q.usr_answers for q in self.quiz.questions}
                       }, fout)
            print('---- QUIZ dumped')

    def load_current_states(self):
        try:
            with open(self.dump_path, 'rb') as fin:
                unpickled = dill.load(fin)
                self.quiz.usersteps = unpickled['usersteps']
                self.quiz.usr_submitted = unpickled['submitted']
                self.quiz.paused = unpickled['paused']
                for q in self.quiz.questions:
                    q.usr_answers = unpickled['usr_answers'][q.name]
                    q.usr_buttons = unpickled['usr_buttons'][q.name]
        except FileNotFoundError:
            print('Quiz Load: FileNotFoundError')
            pass

    def make_reply_markup(self):
        pass

    def welcome_handler(self, bot, message, sqldb: SQLighter):
        result = self.quiz.run(bot, message, sqldb)
        if result == self.quiz.next_global_state_name:
            if not hasattr(self, 'back_keyboard'):
                self.back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                self.back_keyboard.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
            if config.quiz_closed:
                bot.send_message(text='Quiz closed', chat_id=message.chat.id, reply_markup=self.back_keyboard)
            else:
                bot.send_message(chat_id=message.chat.id,
                                 text="Sorry, you have already submitted {} ~_~\"".format(self.quiz.name),
                                 reply_markup=self.back_keyboard)

    def out_handler(self, bot, message, sqldb: SQLighter):
        if message.content_type != 'text':
            return None
        if message.text == '–ù–∞–∑–∞–¥':
            return self.quiz.next_global_state_name
        new_state = self.quiz.run(bot, message, sqldb)
        return new_state


take_quiz = QuizState(name='TAKE_QUIZ')

# ----------------------------------------------------------------------------

check_quiz = State(name='CHECK_QUIZ',
                   triggers_out=OrderedDict(
                       SEND_QQUESTION_TO_CHECK={'phrases': config.quizzes_possible_to_check, 'content_type': 'text'},
                       MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                   welcome_msg='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:')


# ----------------------------------------------------------------------------

def send_qquestion(bot, message, sqldb):
    if message.text not in config.quizzes_possible_to_check:
        quiz_name = sqldb.get_latest_quiz_name(message.chat.username)
    else:
        quiz_name = message.text
    if quiz_name is None:
        bot.send_message("SMTH WENT WRONG..")
        return

    num_checked = sqldb.get_number_checked_for_one_quiz(user_id=message.chat.username,
                                                        quiz_name=quiz_name)
    arr = sqldb.get_quiz_question_to_check(quiz_name=quiz_name,
                                           user_id=message.chat.username)
    if len(arr) > 0:
        q_id, q_name, q_text, q_user_ans, _ = arr
        sqldb.make_fake_db_record_quiz(q_id, message.chat.username)
        text = 'You have checked: {}/{}\n'.format(num_checked, config.quizzes_need_to_check) \
               + q_text + '\n' + 'USER_ANSWER:\n' + q_user_ans
        bot.send_message(chat_id=message.chat.id,
                         text=text, )
    else:
        # TODO: do smth with empty db;
        bot.send_message(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ. –ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".',
                         chat_id=message.chat.id)


send_quiz_question_to_check = State(name='SEND_QQUESTION_TO_CHECK',
                                    row_width=2,
                                    triggers_out=OrderedDict(SAVE_MARK={'phrases': ['–í–µ—Ä—é', '–ù–µ –≤–µ—Ä—é']},
                                                             MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'],
                                                                        'content_type': 'text'}),
                                    handler_welcome=send_qquestion,
                                    welcome_msg='üåª –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?\n'
                                                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.')


# ----------------------------------------------------------------------------

def mark_saving_quiz(bot, message, sqldb):
    is_right = int(message.text == '–í–µ—Ä—é')
    sqldb.save_mark_quiz(message.chat.username, is_right)
    bot.send_message(text='–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ.', chat_id=message.chat.id)


save_mark_quiz = State(name='SAVE_MARK',
                       row_width=2,
                       triggers_out=OrderedDict(SEND_QQUESTION_TO_CHECK={'phrases': ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É']},
                                                CHECK_QUIZ={'phrases': ['–ù–∞–∑–∞–¥']}),
                       handler_welcome=mark_saving_quiz,
                       welcome_msg='üåª –ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –µ—â–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ç–æ–≥–æ –∂–µ –∫–≤–∏–∑–∞?')

# ----------------------------------------------------------------------------

ask_question_start = State(name='ASK_QUESTION_START',
                           triggers_out=OrderedDict(MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'},
                                                    SAVE_QUESTION={'phrases': [], 'content_type': 'text'}),
                           welcome_msg='–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üê†.')


# ----------------------------------------------------------------------------

def save_question_handler(bot, message, sqldb):
    sqldb.write_question(message.chat.username, message.text)


save_question = State(name='SAVE_QUESTION',
                      triggers_out=OrderedDict(MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'},
                                               SAVE_QUESTION={'phrases': [], 'content_type': 'text'}),
                      handler_welcome=save_question_handler,
                      welcome_msg='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üêØ :)\n'
                                  '–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å—Ä–∞–∑—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
                                  '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".')

# ----------------------------------------------------------------------------

welcome_to_pass_msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–¥–∞—á–∏.'
welcome_to_return_msg = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'
pass_hw_num_selection = State(name='PASS_HW_NUM_SELECT',
                              row_width=2,
                              triggers_out=OrderedDict(PASS_HW_CHOSEN_NUM={'phrases': config.hw_possible_to_pass,
                                                                           'content_type': 'text'},
                                                       MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                              welcome_msg=welcome_to_pass_msg if len(config.hw_possible_to_pass) > 0
                              else welcome_to_return_msg)


# ----------------------------------------------------------------------------

def make_fake_db_record(bot, message, sqldb):
    sqldb.make_fake_db_record(message.chat.username, message.text)


pass_hw_chosen_num = State(name='PASS_HW_CHOSEN_NUM',
                           triggers_out=OrderedDict(PASS_HW_UPLOAD={'phrases': [], 'content_type': 'document'},
                                                    PASS_HW_NUM_SELECT={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                           handler_welcome=make_fake_db_record,
                           welcome_msg='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª **(–æ–¥–∏–Ω –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–¥–∏–Ω Jupyter notebook)** –≤–µ—Å–æ–º –Ω–µ –±–æ–ª–µ–µ 20 –ú–±.')


# ----------------------------------------------------------------------------

class HwUploadState(State):
    def welcome_handler(self, bot, message, sqldb: SQLighter):
        username = message.chat.username
        if not message.document.file_name.endswith(config.available_hw_resolutions):
            tmp_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            tmp_markup.add(types.KeyboardButton('–ú–µ–Ω—é'))
            bot.send_message(message.chat.id, "üö´ {}, –æ—á–µ–Ω—å –∂–∞–ª—å –Ω–æ —Ñ–∞–π–ª–∏–∫ –Ω–µ —Å–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É...\n"
                                              "–í–æ–∑–º–æ–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {}.\n"
                                              "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–∑ —Å–¥–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞"
                                              " –∏–ª–∏ –æ–¥–Ω–æ–≥–æ Jupyter –Ω–æ—É—Ç–±—É–∫–∞."
                             .format(username.title(), str(config.available_hw_resolutions)), reply_markup=tmp_markup)
        else:
            sqldb.upd_homework(user_id=username, file_id=message.document.file_id)
            bot.send_message(message.chat.id,
                             '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, –≤–∞—à —Ñ–∞–π–ª–∏–∫ –±—ã–ª –∑–∞–±–æ—Ç–ª–∏–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω üêæ\n'
                             .format(username.title()),
                             reply_markup=self.reply_markup, parse_mode='Markdown')

    def out_handler(self, bot, message, sqldb: SQLighter):
        for state_name, attribs in self.triggers_out.items():
            if message.content_type == 'document':
                return self.welcome_handler(bot, message, sqldb)

            elif (message.content_type == 'text') and (message.text in attribs['phrases']):
                return state_name
        return self.default_out_handler(bot, message)


pass_hw_upload = HwUploadState(name='PASS_HW_UPLOAD',
                               triggers_out=OrderedDict(
                                   PASS_HW_NUM_SELECT={'phrases': ['–°–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–∑'], 'content_type': 'text'},
                                   MAIN_MENU={'phrases': ['–ú–µ–Ω—é'], 'content_type': 'text'}))


# ----------------------------------------------------------------------------


def show_marks_table(bot, message, sqldb):
    num_checked = sqldb.get_num_checked(message.chat.username)
    if len(num_checked) == 0:
        bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, '
                                          '–≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 —Ä–∞–±–æ—Ç—ã'
                                          ' –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–¥–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∑–∞–¥–∞–Ω–∏—è, '
                                          '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é. '
                                          '–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ :(.'.format(
            message.chat.username.title()),
                         parse_mode='Markdown')
    else:
        may_be_shown = []
        for num, count in num_checked:
            if count < 3:
                bot.send_message(message.chat.id, 'üëª –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ –∑–∞–¥–∞–Ω–∏—é {}'
                                                  ' –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ [{}]'
                                                  ' –∑–∞–¥–∞–Ω–∏–π —ç—Ç–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.'.format(num, 3 - count))
            else:
                may_be_shown.append(num)

        if len(may_be_shown) == 0:
            return

        marks = sqldb.get_marks(message.chat.username)
        if len(marks) < 1:
            bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, '
                                              '–≤–∞—à–∏ —Ä–∞–±–æ—Ç—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∏ –æ–¥–Ω–∏–º —Ä–∞–∑—É–º–Ω—ã–º —Å—É—â–µ—Å—Ç–≤–æ–º.\n'
                                              '–û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–¥–µ—è—Ç—å—Å—è –∏ –≤–µ—Ä–∏—Ç—å –≤ –ª—É—á—à–µ–µ üê∏'.format(
                message.chat.username.title()),
                             parse_mode='Markdown')
        else:
            count_what_show = 0
            ans = '_–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ_\n'
            for hw_num, date, mark in marks:
                if hw_num in may_be_shown:
                    count_what_show += 1
                    ans += 'üêõ –î–ª—è —Ä–∞–±–æ—Ç—ã *' + hw_num + '*, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π *' + date + '* –æ—Ü–µ–Ω–∫–∞: *' + str(
                        round(mark, 2)) + '*\n'
            if count_what_show > 0:
                bot.send_message(message.chat.id, ans, parse_mode='Markdown')
                bot.send_message(message.chat.id, '–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∑–Ω–∞—á–∏—Ç –µ–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏.')
            else:
                bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, '
                                                  '–≤–∞—à–∏ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –≤–∞–º–∏ –∑–∞–¥–∞–Ω–∏—è–º –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã'
                                                  ' –Ω–∏ –æ–¥–Ω–∏–º —Ä–∞–∑—É–º–Ω—ã–º —Å—É—â–µ—Å—Ç–≤–æ–º.\n'
                                                  '–û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–¥–µ—è—Ç—å—Å—è –∏ –≤–µ—Ä–∏—Ç—å –≤ –ª—É—á—à–µ–µ üê∏ '
                                                  '(_–∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–º –∏ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_)'.format(
                    message.chat.username.title()),
                                 parse_mode='Markdown')


get_mark = State(name='GET_MARK',
                 triggers_out=OrderedDict(MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                 handler_welcome=show_marks_table,
                 welcome_msg='–¢–∞–∫–∏–µ –¥–µ–ª–∞)')


# ----------------------------------------------------------------------------

welcome_to_quiz_selection = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–≤–∏–∑, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫—É.'
return_from_quiz_selection = '–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.'

quiz_mark_num_select = State(name='QUIZ_MARK_NUM_SELECT',
                              row_width=2,
                              triggers_out=OrderedDict(GET_QUIZ_MARK={'phrases': config.quizzes_possible_to_check,
                                                                      'content_type': 'text'},
                                                       MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                              welcome_msg=welcome_to_quiz_selection if len(config.quizzes_possible_to_check) > 0
                              else return_from_quiz_selection)

# ----------------------------------------------------------------------------

def get_marks_table_quiz(bot, message, sqldb):
    quiz_name = message.text
    num_checked = sqldb.get_number_checked_quizzes(message.chat.username, quiz_name)

    if num_checked < config.quizzes_need_to_check:
        bot.send_message(chat_id=message.chat.id,
                         text='üå≥üåª –í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ {} –∫–≤–∏–∑–æ–≤ –¥–ª—è {}. '
                              '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ {} –∫–≤–∏–∑–æ–≤,'
                              ' —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –ø–æ —ç—Ç–æ–º—É –∫–≤–∏–∑—É.'.format(num_checked, quiz_name,
                                                                        config.quizzes_need_to_check - num_checked))
        return
    df = sqldb.get_marks_quiz(user_id=message.chat.username, quiz_name=quiz_name)
    if df.empty:
        bot.send_message(chat_id=message.chat.id,
                         text="–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –≤–∞—à –∫–≤–∏–∑ {} –∏–ª–∏ –≤—ã –µ–≥–æ –≤–æ–æ–±—â–µ –Ω–µ —Å–¥–∞–≤–∞–ª–∏.\n"
                              "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.üå≥üåª ".format(quiz_name))
        return
    finals = defaultdict(list)
    for i, row in df.iterrows():
        text = '*' + quiz_name + '*\n' + '=' * 20 + '\n'
        text += row.QuestionText + '\n' + '=' * 20 + '\n' + '*Your Answer: *\n' \
                + str(row.YourAnswer) + '\n*Score: *' + str(row.Score)
        if not pd.isna(row.NumChecks):
            text += '\n*Checked for [{}] times*'.format(row.NumChecks)
        bot.send_message(text=text, chat_id=message.chat.id, parse_mode='Markdown')
    final_score = int(sum(df.Score)) if (not pd.isna(sum(df.Score))) else 0
    mark = '{}/{}'.format(final_score, len(df))
    finals['quiz'].append(quiz_name)
    finals['mark'].append(mark)
    bot.send_message(text='<code>' + tabulate(finals, headers='keys', tablefmt="fancy_grid") + '</code>',
                     chat_id=message.chat.id, parse_mode='html')


get_quiz_mark = State(name='GET_QUIZ_MARK',
                      triggers_out=OrderedDict(QUIZ_MARK_NUM_SELECT={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                      handler_welcome=get_marks_table_quiz,
                      welcome_msg='Good Luck:)')

# ----------------------------------------------------------------------------

welcome_check_hw = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏' if len(config.hw_possible_to_check) > 0 \
    else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π. –í—ã–ø–µ–π—Ç–µ —á–∞—é, –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ.'
check_hw_num_selection = State(name='CHECK_HW_NUM_SELECT', triggers_out=OrderedDict(
    CHECK_HW_SEND={'phrases': config.hw_possible_to_check, 'content_type': 'text'},
    MAIN_MENU={'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}),
                               welcome_msg=welcome_check_hw,
                               row_width=2)


# ----------------------------------------------------------------------------

def choose_file_and_send(bot, message, sqldb):
    # TODO: do smth to fix work with empty hw set;
    # TODO: OH MY GOD! people should check only work that they have done!!!!
    hw_num = message.text
    file_id = sqldb.get_file_ids(hw_num=hw_num,
                                  user_id=message.chat.username)
    if len(file_id) > 0:
        sqldb.write_check_hw_ids(message.chat.username, file_id)
        bot.send_message(chat_id=message.chat.id,
                         text='–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.')
        bot.send_document(message.chat.id, file_id)
        bot.send_message(chat_id=message.chat.id,
                         text='–°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤–∞–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞ —Ö–æ—Ä–æ—à–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.')
        example_file = sqldb.get_example_hw_id(hw_num=hw_num)
        if len(example_file)>0:
            bot.send_document(message.chat.id, file_id)
        else:
            bot.send_message(chat_id=message.chat.id,
                             text='–û–π –Ω–µ—Ç. –Ø –ø–æ—à—É—Ç–∏–ª. –ù–∏–∫–∞–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑.')
    else:
        print("ERROR! empty sequence")
        bot.send_message(chat_id=message.chat.id,
                         text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º @fogside")


check_hw_send = State(name='CHECK_HW_SEND',
                      triggers_out=OrderedDict(CHECK_HW_SAVE_MARK={'phrases': config.marks,
                                                                   'content_type': 'text'},
                                               MAIN_MENU={'phrases': ['–ú–µ–Ω—é'], 'content_type': 'text'}),
                      handler_welcome=choose_file_and_send,
                      row_width=3,
                      welcome_msg="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É.")


# ----------------------------------------------------------------------------

def save_mark(bot, message, sqldb):
    sqldb.save_mark(message.chat.username, message.text)


check_hw_save_mark = State(name='CHECK_HW_SAVE_MARK',
                           triggers_out=OrderedDict(CHECK_HW_NUM_SELECT={'phrases': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É'],
                                                                         'content_type': 'text'},
                                                    MAIN_MENU={'phrases': ['–ú–µ–Ω—é'], 'content_type': 'text'}),
                           welcome_msg='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É:)',
                           handler_welcome=save_mark)

# ----------------------------------------------------------------------------

admin_menu = State(name='ADMIN_MENU',
                   row_width=3,
                   triggers_out=OrderedDict(KNOW_NEW_QUESTIONS={'phrases': ['Questions'], 'content_type': 'text'},
                                            SEE_HW_STAT={'phrases': ['Homeworks'], 'content_type': 'text'},
                                            SEE_QUIZZES_STAT={'phrases': ['Quizzes'], 'content_type': 'text'},
                                            MAIN_MENU={'phrases': ['MainMenu'], 'content_type': 'text'},
                                            MAKE_BACKUP={'phrases': ['MakeBackup'], 'content_type': 'text'}),
                   welcome_msg='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ –í–µ–ª–∏–∫–∏–π –û–¥–º–µ–Ω!')


# ----------------------------------------------------------------------------

def make_backup_now(bot, message, sqldb):
    return 'BACKUP_NOW'


make_backup = State(name='MAKE_BACKUP',
                    triggers_out=OrderedDict(ADMIN_MENU={'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'],
                                                         'content_type': 'text'}),
                    handler_welcome=make_backup_now,
                    welcome_msg='Working on pickling objects...')


# ----------------------------------------------------------------------------

def get_quizzes_stat(bot, message, sqldb):
    for quiz_name in config.quizzes_possible_to_check:
        quizzes_stat = sqldb.get_quizzes_stat(quiz_name)
        bot.send_message(text="*FOR {}*".format(quiz_name),
                         chat_id=message.chat.id,
                         parse_mode='Markdown')
        bot.send_message(
            text='<code>' + tabulate(pd.DataFrame(quizzes_stat, index=[0]).T, tablefmt="fancy_grid") + '</code>',
            chat_id=message.chat.id, parse_mode='html')


see_quizzes_stat = State(name='SEE_QUIZZES_STAT',
                         triggers_out=OrderedDict(ADMIN_MENU={'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'],
                                                              'content_type': 'text'}),
                         handler_welcome=get_quizzes_stat,
                         welcome_msg='–≠—Ç–æ –≤—Å–µ üëΩ')


# ----------------------------------------------------------------------------

def get_questions(bot, message, sqldb):
    questions = sqldb.get_questions_last_week()
    if len(questions) > 0:
        res = '*Questions for the last week*\n'
        for user_id, question, date in questions:
            res += 'üëΩ User: *' + user_id + '* asked at *' + date + '*:\n' + question + '\n\n'
        # Split the text each 3000 characters.
        # split_string returns a list with the splitted text.
        splitted_text = util.split_string(res, 3000)
        for text in splitted_text:
            bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, '_–ù–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é_:(',
                         parse_mode='Markdown')


know_new_questions = State(name='KNOW_NEW_QUESTIONS',
                           triggers_out=OrderedDict(ADMIN_MENU={'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'],
                                                                'content_type': 'text'}),
                           handler_welcome=get_questions,
                           welcome_msg='–≠—Ç–æ –≤—Å–µ üëΩ')


# ----------------------------------------------------------------------------

def get_hw_stat(bot, message, sqldb):
    hw_stat = sqldb.get_checked_works_stat()
    if len(hw_stat) == 0:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–µ–∫ —Å–æ–≤—Å–µ–º:( –ì—Ä—É—Å—Ç—å –ø–µ—á–∞–ª—å.")
    else:
        ans = '_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ_\n'
        for sem, count in hw_stat:
            ans += sem + '\t' + str(count) + '\n'
        bot.send_message(message.chat.id, ans, parse_mode='Markdown')


see_hw_stat = State(name='SEE_HW_STAT',
                    triggers_out=OrderedDict(ADMIN_MENU={'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'], 'content_type': 'text'}),
                    handler_welcome=get_hw_stat,
                    welcome_msg='–≠—Ç–æ –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ.\n–ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—É—Ç –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏.')

# ----------------------------------------------------------------------------
