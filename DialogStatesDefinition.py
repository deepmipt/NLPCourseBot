from DialogClasses import *
from Sqlighter import SQLighter
import universal_reply
import config

wait_usr_interaction = State(name='WAIT_USR_INTERACTION',
                             triggers_out={'MAIN_MENU': {'phrases': ['/start'], 'content_type': 'text'}},
                             welcome_msg='')
# ----------------------------------------------------------------------------

main_menu = State(name='MAIN_MENU',
                  triggers_out={'PASS_HW_NUM_SELECT': {'phrases': ['–°–¥–∞—Ç—å –¥–∑'], 'content_type': 'text'},
                                'ASK_QUESTION_START': {'phrases': ['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É'], 'content_type': 'text'},
                                'GET_MARK': {'phrases': ['–£–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –∑–∞ –¥–∑'], 'content_type': 'text'},
                                'CHECK_HW_NUM_SELECT': {'phrases': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∑'], 'content_type': 'text'},
                                'ADMIN_MENU': {'phrases': [universal_reply.ADMIN_KEY_PHRASE], 'content_type': 'text'}},
                  hidden_states=['ADMIN_MENU'],
                  welcome_msg='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')

# ----------------------------------------------------------------------------

ask_question_start = State(name='ASK_QUESTION_START',
                           triggers_out={'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'},
                                         'SAVE_QUESTION': {'phrases': [], 'content_type': 'text'}},
                           welcome_msg='–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')


# ----------------------------------------------------------------------------

def save_question_handler(bot, message):
    sqldb = SQLighter(config.bd_name)
    sqldb.write_question(user_id=message.chat.username, question=message.text)


save_question = State(name='SAVE_QUESTION',
                      triggers_out={'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'},
                                    'SAVE_QUESTION': {'phrases': [], 'content_type': 'text'}},
                      handler_welcome=save_question_handler,
                      welcome_msg='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üêØ :)\n'
                                  '–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å—Ä–∞–∑—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
                                  '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".')

# ----------------------------------------------------------------------------

pass_hw_num_selection = State(name='PASS_HW_NUM_SELECT',
                              triggers_out={'PASS_HW_CHOSEN_NUM': {'phrases': config.hw_possible_to_pass,
                                                                   'content_type': 'text'},
                                            'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                              welcome_msg='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.')


# ----------------------------------------------------------------------------

def make_fake_db_record(bot, message):
    pass


pass_hw_chosen_num = State(name='PASS_HW_CHOSEN_NUM',
                           triggers_out={'PASS_HW_UPLOAD': {'phrases': [], 'content_type': 'document'},
                                         'PASS_HW_NUM_SELECT': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                           handler_welcome=make_fake_db_record,
                           welcome_msg='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª **(–æ–¥–∏–Ω –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–¥–∏–Ω Jupyter notebook)** –≤–µ—Å–æ–º –Ω–µ –±–æ–ª–µ–µ 20 –ú–±.')


# ----------------------------------------------------------------------------

def hw_saver(bot, message):
    pass


pass_hw_upload = State(name='PASS_HW_UPLOAD',
                       triggers_out={'PASS_HW_NUM_SELECT': {'phrases': ['–°–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–∑'], 'content_type': 'text'},
                                     'MAIN_MENU': {'phrases': ['–ú–µ–Ω—é'], 'content_type': 'text'}},
                       handler_welcome=hw_saver,
                       welcome_msg='–í–∞—à —Ñ–∞–π–ª–∏–∫ –±—ã–ª –∑–∞–±–æ—Ç–ª–∏–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω üêæ\n')


# ----------------------------------------------------------------------------

def show_marks_table(bot, message):
    pass


get_mark = State(name='GET_MARK',
                 triggers_out={'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                 handler_welcome=show_marks_table,
                 welcome_msg='–¢–∞–∫–∏–µ –¥–µ–ª–∞)')

# ----------------------------------------------------------------------------

check_hw_num_selection = State(name='CHECK_HW_NUM_SELECT',
                               triggers_out={'CHECK_HW_SEND': {'phrases': config.hw_possible_to_check,
                                                               'content_type': 'text'},
                                             'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                               welcome_msg='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')


# ----------------------------------------------------------------------------

def choose_file_and_send(bot, message):
    pass


check_hw_send = State(name='CHECK_HW_SEND',
                      triggers_out={'CHECK_HW_SAVE_MARK': {'phrases': config.marks, 'content_type':'text'}},
                      handler_welcome=choose_file_and_send,
                      welcome_msg="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É.")


# ----------------------------------------------------------------------------

def save_mark(bot, message):
    pass


check_hw_save_mark = State(name='CHECK_HW_SAVE_MARK',
                           triggers_out={'CHECK_HW_NUM_SELECT': {'phrases': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É'],
                                                                 'content_type': 'text'},
                                         'MAIN_MENU': {'phrases': ['–ú–µ–Ω—é'],
                                                       'content_type': 'text'}},
                           welcome_msg='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É:)',
                           handler_welcome=save_mark)

# ----------------------------------------------------------------------------

admin_menu = State(name='ADMIN_MENU',
                   triggers_out={
                       'KNOW_NEW_QUESTIONS': {'phrases': ['–£–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–µ–º–∏–Ω–∞—Ä—É'], 'content_type': 'text'},
                       'SEE_HW_STAT': {'phrases': ['–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–∞—á–∏ –¥–æ–º–∞—à–µ–∫'], 'content_type': 'text'},
                       'MAIN_MENU': {'phrases': ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 'content_type': 'text'}},
                   welcome_msg='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ –í–µ–ª–∏–∫–∏–π –û–¥–º–µ–Ω!')


# ----------------------------------------------------------------------------

def get_questions(bot, message):
    pass


know_new_questions = State(name='KNOW_NEW_QUESTIONS',
                           triggers_out={'ADMIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'], 'content_type': 'text'}},
                           handler_welcome=get_questions,
                           welcome_msg='–≠—Ç–æ –≤—Å–µ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã')


# ----------------------------------------------------------------------------

def get_hw_stat(bot, message):
    pass


see_hw_stat = State(name='SEE_HW_STAT',
                    triggers_out={'ADMIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'], 'content_type': 'text'}},
                    handler_welcome=get_hw_stat,
                    welcome_msg='–≠—Ç–æ –≤—Å–µ –¥–æ–º–∞—à–∫–∏')
