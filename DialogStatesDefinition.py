from DialogClasses import *
from Sqlighter import SQLighter
import universal_reply
import config
import random

wait_usr_interaction = State(name='WAIT_USR_INTERACTION',
                             triggers_out={'MAIN_MENU': {'phrases': ['/start'], 'content_type': 'text'}},
                             welcome_msg='')
# ----------------------------------------------------------------------------

main_menu = State(name='MAIN_MENU',
                  triggers_out={'PASS_HW_NUM_SELECT': {'phrases': ['üêü –°–¥–∞—Ç—å –¥–∑ üê†'], 'content_type': 'text'},
                                'ASK_QUESTION_START': {'phrases': ['ü¶â –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä—É ü¶â'],
                                                       'content_type': 'text'},
                                'GET_MARK': {'phrases': ['üêù –£–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –∑–∞ –¥–∑ üêù'], 'content_type': 'text'},
                                'CHECK_HW_NUM_SELECT': {'phrases': ['üêå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∑ üêå'], 'content_type': 'text'},
                                'ADMIN_MENU': {'phrases': [universal_reply.ADMIN_KEY_PHRASE], 'content_type': 'text'}},
                  hidden_states={'state_name': 'ADMIN_MENU', 'users_file': config.admins},
                  welcome_msg='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')

# ----------------------------------------------------------------------------

ask_question_start = State(name='ASK_QUESTION_START',
                           triggers_out={'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'},
                                         'SAVE_QUESTION': {'phrases': [], 'content_type': 'text'}},
                           welcome_msg='–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ —Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üê†.')


# ----------------------------------------------------------------------------

def save_question_handler(bot, message, sqldb):
    sqldb.write_question(message.chat.username, message.text)


save_question = State(name='SAVE_QUESTION',
                      triggers_out={'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'},
                                    'SAVE_QUESTION': {'phrases': [], 'content_type': 'text'}},
                      handler_welcome=save_question_handler,
                      welcome_msg='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üêØ :)\n'
                                  '–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å—Ä–∞–∑—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
                                  '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".')

# ----------------------------------------------------------------------------

pass_hw_num_selection = State(name='PASS_HW_NUM_SELECT',
                              row_width=2,
                              triggers_out={'PASS_HW_CHOSEN_NUM': {'phrases': config.hw_possible_to_pass,
                                                                   'content_type': 'text'},
                                            'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                              welcome_msg='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.')


# ----------------------------------------------------------------------------

def make_fake_db_record(bot, message, sqldb):
    sqldb.make_fake_db_record(message.chat.username, message.text)


pass_hw_chosen_num = State(name='PASS_HW_CHOSEN_NUM',
                           triggers_out={'PASS_HW_UPLOAD': {'phrases': [], 'content_type': 'document'},
                                         'PASS_HW_NUM_SELECT': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                           handler_welcome=make_fake_db_record,
                           welcome_msg='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª **(–æ–¥–∏–Ω –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–¥–∏–Ω Jupyter notebook)** –≤–µ—Å–æ–º –Ω–µ –±–æ–ª–µ–µ 20 –ú–±.')


# ----------------------------------------------------------------------------

class HwUploadState(State):
    def welcome_handler(self, bot, message, sqldb: SQLighter):
        username = message.chat.username
        if not message.document.file_name.endswith(config.available_hw_resolutions):
            tmp_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            tmp_markup.add(types.KeyboardButton('–ú–µ–Ω—é'))
            bot.send_message(message.chat.id, "üö´ {}, –æ—á–µ–Ω—å –∂–∞–ª—å –Ω–æ —Ñ–∞–π–ª–∏–∫ –Ω–µ —Å–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É...\n"
                                              "–í–æ–∑–º–æ–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {}.\n"
                                              "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–∑ —Å–¥–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ Jupyter –Ω–æ—É—Ç–±—É–∫–∞."
                             .format(username.title(), str(config.available_hw_resolutions)), reply_markup=tmp_markup)
        else:
            sqldb.upd_homework(user_id=username, file_id=message.document.file_id)
            bot.send_message(message.chat.id,
                             '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, –≤–∞—à —Ñ–∞–π–ª–∏–∫ –±—ã–ª –∑–∞–±–æ—Ç–ª–∏–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω üêæ\n'
                             .format(username.title()),
                             reply_markup=self.reply_markup, parse_mode='Markdown')

    def out_handler(self, bot, message, sqldb: SQLighter):
        for state_name, attribs in self.triggers_out.items():
            if message.content_type == 'document':
                return self.welcome_handler(bot, message, sqldb)

            elif (message.content_type == 'text') and (message.text in attribs['phrases']):
                return state_name
        return self.default_out_handler(bot, message)


pass_hw_upload = HwUploadState(name='PASS_HW_UPLOAD',
                               triggers_out={
                                   'PASS_HW_NUM_SELECT': {'phrases': ['–°–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–∑'], 'content_type': 'text'},
                                   'MAIN_MENU': {'phrases': ['–ú–µ–Ω—é'], 'content_type': 'text'}})


# ----------------------------------------------------------------------------

def show_marks_table(bot, message, sqldb):
    marks = sqldb.get_marks(message.chat.username)
    if len(marks) < 1:
        bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π *{}*, '
                                          '–≤–∞—à–∏ —Ä–∞–±–æ—Ç—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∏ –æ–¥–Ω–∏–º —Ä–∞–∑—É–º–Ω—ã–º —Å—É—â–µ—Å—Ç–≤–æ–º.\n'
                                          '–û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–¥–µ—è—Ç—å—Å—è –∏ –≤–µ—Ä–∏—Ç—å –≤ –ª—É—á—à–µ–µ üê∏'.format(
            message.chat.username.title()),
                         parse_mode='Markdown')
    else:
        ans = '_–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ_\n'
        for hw_num, date, mark in marks:
            ans += 'üêõ –î–ª—è —Ä–∞–±–æ—Ç—ã *' + hw_num + '*, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π *' + date + '* –æ—Ü–µ–Ω–∫–∞: *' + str(round(mark, 2)) + '*\n'
        bot.send_message(message.chat.id, ans, parse_mode='Markdown')
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∑–Ω–∞—á–∏—Ç –µ–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏.')


get_mark = State(name='GET_MARK',
                 triggers_out={'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                 handler_welcome=show_marks_table,
                 welcome_msg='–¢–∞–∫–∏–µ –¥–µ–ª–∞)')

# ----------------------------------------------------------------------------

check_hw_num_selection = State(name='CHECK_HW_NUM_SELECT',
                               triggers_out={'CHECK_HW_SEND': {'phrases': config.hw_possible_to_check,
                                                               'content_type': 'text'},
                                             'MAIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥'], 'content_type': 'text'}},
                               welcome_msg='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
                               row_width=2)


# ----------------------------------------------------------------------------

def choose_file_and_send(bot, message, sqldb):
    file_ids = sqldb.get_file_ids(hw_num=message.text, number_of_files=3)
    print(file_ids)
    if len(file_ids) > 0:
        chosen_file = random.choice(file_ids)[0]
        sqldb.write_check_hw_ids(message.chat.username, chosen_file)
        bot.send_document(message.chat.id, chosen_file)
    else:
        print("ERROR! empty sequence")
        pass


check_hw_send = State(name='CHECK_HW_SEND',
                      triggers_out={'CHECK_HW_SAVE_MARK': {'phrases': config.marks, 'content_type': 'text'}},
                      handler_welcome=choose_file_and_send,
                      row_width=3,
                      welcome_msg="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É.")


# ----------------------------------------------------------------------------

def save_mark(bot, message, sqldb):
    sqldb.save_mark(message.chat.username, message.text)


check_hw_save_mark = State(name='CHECK_HW_SAVE_MARK',
                           triggers_out={'CHECK_HW_NUM_SELECT': {'phrases': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É'],
                                                                 'content_type': 'text'},
                                         'MAIN_MENU': {'phrases': ['–ú–µ–Ω—é'],
                                                       'content_type': 'text'}},
                           welcome_msg='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É:)',
                           handler_welcome=save_mark)

# ----------------------------------------------------------------------------

admin_menu = State(name='ADMIN_MENU',
                   triggers_out={
                       'KNOW_NEW_QUESTIONS': {'phrases': ['–£–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–µ–º–∏–Ω–∞—Ä—É'], 'content_type': 'text'},
                       'SEE_HW_STAT': {'phrases': ['–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–∞—á–∏ –¥–æ–º–∞—à–µ–∫'], 'content_type': 'text'},
                       'MAIN_MENU': {'phrases': ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 'content_type': 'text'}},
                   welcome_msg='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ –í–µ–ª–∏–∫–∏–π –û–¥–º–µ–Ω!')


# ----------------------------------------------------------------------------

def get_questions(bot, message, sqldb):
    questions = sqldb.get_questions_last_week()
    if len(questions) > 0:
        res = '*Questions for the last week*\n'
        for user_id, question, date in questions:
            res += 'üëΩ User: *' + user_id + '* asked at *' + date + '*:\n' + question + '\n\n'
        bot.send_message(message.chat.id, res, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, '_–ù–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é_:(',
                         parse_mode='Markdown')


know_new_questions = State(name='KNOW_NEW_QUESTIONS',
                           triggers_out={'ADMIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'], 'content_type': 'text'}},
                           handler_welcome=get_questions,
                           welcome_msg='–≠—Ç–æ –≤—Å–µ üëΩ')


# ----------------------------------------------------------------------------

def get_hw_stat(bot, message, sqldb):
    hw_stat = sqldb.get_checked_works_stat()
    if len(hw_stat) == 0:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–µ–∫ —Å–æ–≤—Å–µ–º:( –ì—Ä—É—Å—Ç—å –ø–µ—á–∞–ª—å.")
    else:
        ans = '_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ_\n'
        for sem, count in hw_stat:
            ans += sem + '\t' + str(count) + '\n'
        bot.send_message(message.chat.id, ans, parse_mode='Markdown')


see_hw_stat = State(name='SEE_HW_STAT',
                    triggers_out={'ADMIN_MENU': {'phrases': ['–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É'], 'content_type': 'text'}},
                    handler_welcome=get_hw_stat,
                    welcome_msg='–≠—Ç–æ –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ.\n–ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—É—Ç –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏.')
